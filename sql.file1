-- Step 1NF: Split products into separate rows
CREATE TABLE ProductDetail_1NF (
  OrderID INT,
  CustomerName VARCHAR(100),
  Product VARCHAR(100)
);

-- Inserting normalized values manually (as SQL does not support string split easily without procedures)
INSERT INTO ProductDetail_1NF VALUES
(101, 'John Doe', 'Laptop'),
(101, 'John Doe', 'Mouse'),
(102, 'Jane Smith', 'Tablet'),
(102, 'Jane Smith', 'Keyboard'),
(102, 'Jane Smith', 'Mouse'),
(103, 'Emily Clark', 'Phone');

-- Step 2NF: Remove partial dependency (CustomerName depends only on OrderID)
-- Create Orders table
CREATE TABLE Orders (
  OrderID INT PRIMARY KEY,
  CustomerName VARCHAR(100)
);

INSERT INTO Orders VALUES
(101, 'John Doe'),
(102, 'Jane Smith'),
(103, 'Emily Clark');

-- Step 3NF: Eliminate transitive dependency by introducing Products table
CREATE TABLE Products (
  ProductID INT PRIMARY KEY,
  ProductName VARCHAR(100)
);

-- Insert distinct products
INSERT INTO Products VALUES
(1, 'Laptop'),
(2, 'Mouse'),
(3, 'Tablet'),
(4, 'Keyboard'),
(5, 'Phone');

-- Create OrderItems table with foreign keys
CREATE TABLE OrderItems (
  OrderID INT,
  ProductID INT,
  Quantity INT,
  PRIMARY KEY (OrderID, ProductID),
  FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
  FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insert OrderItems using ProductID
INSERT INTO OrderItems VALUES
(101, 1, 2),
(101, 2, 1),
(102, 3, 3),
(102, 4, 1),
(102, 2, 2),
(103, 5, 1);

-- Sample Queries
-- 1. List all orders with customer names and their products
SELECT o.OrderID, o.CustomerName, p.ProductName, oi.Quantity
FROM Orders o
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID;

-- 2. Find total quantity of each product ordered
SELECT p.ProductName, SUM(oi.Quantity) AS TotalQuantity
FROM OrderItems oi
JOIN Products p ON oi.ProductID = p.ProductID
GROUP BY p.ProductName;

-- 3. Get all orders placed by 'Jane Smith'
SELECT o.OrderID, p.ProductName, oi.Quantity
FROM Orders o
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID
WHERE o.CustomerName = 'Jane Smith';

-- ER Diagram (text-based representation)
-- [Orders] ──< OrderID >── [OrderItems] ──< ProductID >── [Products]
-- Orders(OrderID, CustomerName)
-- Products(ProductID, ProductName)
-- OrderItems(OrderID, ProductID, Quantity)
